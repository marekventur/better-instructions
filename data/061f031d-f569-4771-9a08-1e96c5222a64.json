{
  "id": "061f031d-f569-4771-9a08-1e96c5222a64",
  "instruction": "Create a script to find the longest palindrome in a given string",
  "input": "",
  "output": "\"\"\"\nFind the longest palindrome in a given string\n\"\"\"\n\ndef find_longest_palindrome(s):\n\t# Initialize result \n\tmax_length = 1\t \n\t\n\t# Initialize start and end index\n\tstart, end = 0, 0\n\t\n\t# Iterate over the input string\n\tfor i in range(1, len(s)):\n\t\t\t\t\n\t\t# Find the longest even length palindrome\n\t\tlow, high = i-1, i \n\t\twhile low >= 0 and high < len(s) and s[low] == s[high]:\n\t\t\tif high - low + 1 > max_length:\n\t\t\t\tstart = low \n\t\t\t\tend = high \n\t\t\t\tmax_length = high - low + 1 \n\t\t\tlow -= 1\n\t\t\thigh += 1\n\t\t# Find the longest odd length palindrome\n\t\tlow, high = i-1, i+1 \n\t\twhile low >= 0 and high < len(s) and s[low] == s[high]: \n\t\t\tif high - low + 1 > max_length:\n\t\t\t\tstart = low \n\t\t\t\tend = high \n\t\t\t\tmax_length = high - low + 1 \n\t\t\tlow -= 1\n\t\t\thigh += 1\n\t\n\t# return result\n\treturn s[start:end+1]\n\t\nif __name__ == '__main__':\n\ts = \"babad\"\n\tprint(\"The longest palindrome is: \", end=\"\")\n\tprint(find_longest_palindrome(s))",
  "license": "stanford-alpaca-unknown",
  "generation-type": "openai-text-davinci-003",
  "generation-reference": "https://github.com/tatsu-lab/stanford_alpaca/blob/main/alpaca_data.json",
  "modified": [],
  "verified": [],
  "tags": []
}