{
  "id": "08cf5003-2c26-44d7-8bb5-85d2b395fb4e",
  "instruction": "Write JavaScript code to solve this programming puzzle.",
  "input": "Given a string, find the length of the longest substring without repeating characters.\n\nExample:\n\nInput: \"abcabcbb\"\nOutput: 3",
  "output": "function lengthOfLongestSubstring(str) { \n  \n    // initialize a string variable and an array variable\n    let currentString = \" \", \n        charIndexes = []; \n  \n    // iterate through the string\n    for (let i = 0; i < str.length; i++) { \n  \n        // if the character is in the map, update the index to the current\n        if (charIndexes.includes(str[i])) { \n            charIndexes = charIndexes.slice(charIndexes.indexOf(str[i]) + 1); \n        } \n  \n        // add the character its index to the array\n        charIndexes.push(str[i]); \n  \n        // update the current string\n        currentString = (currentString.length < charIndexes.length) ? charIndexes.join(\"\") : currentString; \n    } \n  \n    // return the output\n    return currentString.length; \n}",
  "license": "stanford-alpaca-unknown",
  "generation-type": "openai-text-davinci-003",
  "generation-reference": "https://github.com/tatsu-lab/stanford_alpaca/blob/main/alpaca_data.json",
  "modified": [],
  "verified": [],
  "tags": []
}