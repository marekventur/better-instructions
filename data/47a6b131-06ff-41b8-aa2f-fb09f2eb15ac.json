{
  "id": "47a6b131-06ff-41b8-aa2f-fb09f2eb15ac",
  "instruction": "Write a C++ library that implements a linked list",
  "input": "",
  "output": "#include<iostream>\nusing namespace std;\n\nstruct Node {\n    int data;\n    struct Node *next;\n};\n\n// Add a new node to the end of the list \nvoid append(struct Node** head_ref, int new_data) \n{ \n    Node* new_node = new Node; \n  \n    Node *last = *head_ref;\n  \n    new_node->data = new_data; \n  \n    new_node->next = NULL; \n  \n    if (*head_ref == NULL) { \n        *head_ref = new_node; \n        return; \n    } \n  \n    while (last->next != NULL) \n        last = last->next; \n  \n    last->next = new_node; \n    return; \n} \n\n// Delete the node at a given position \nvoid deleteNode(struct Node **head_ref, int position) \n{ \n    if (*head_ref == NULL) \n        return; \n    struct Node *temp = *head_ref; \n    if (position == 0) \n    { \n        *head_ref = temp->next;   \n        free(temp);               \n        return; \n    } \n\n   for (int i=0; temp!=NULL && i<position-1; i++) \n         temp = temp->next; \n  \n    if (temp == NULL || temp->next == NULL) \n         return; \n  \n   struct Node *next = temp->next->next; \n\n   free(temp->next);  \n   temp->next = next;  \n}",
  "license": "stanford-alpaca-unknown",
  "generation-type": "openai-text-davinci-003",
  "generation-reference": "https://github.com/tatsu-lab/stanford_alpaca/blob/main/alpaca_data.json",
  "modified": [],
  "verified": [],
  "tags": []
}