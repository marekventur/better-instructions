{
  "id": "24e1433e-8822-4d0b-a416-f179ecf9c4cc",
  "instruction": "Generate an algorithm that finds and displays the longest common substring between two strings of text.",
  "input": "String 1: This is an example\nString 2: This string should contain the example",
  "output": "1. Split the two strings into arrays of characters\n2. Initialize two variables and a two-dimensional array for lengths of the longest common substring\n3. For each character in the array, compare with the character from the same index in the other string to check for a match\n4. If there is a match, add 1 to the length variable, and update the two-dimensional array \n5. If the length variable is greater than the entry in the two-dimensional array, update the array with the new length value \n6. After all the characters have been compared, return the maximum value in the two-dimensional array as the length of the longest common substring \n7. Initialize an empty string to store the longest common substring\n8. Traverse through the two-dimensional array to find the indices of the maximum value\n9. For each index, starting from the maximum value, add the characters at that index in the two strings to the empty string\n10. After all the indices have been traversed, return the full string as the longest common substring",
  "license": "stanford-alpaca-unknown",
  "generation-type": "openai-text-davinci-003",
  "generation-reference": "https://github.com/tatsu-lab/stanford_alpaca/blob/main/alpaca_data.json",
  "modified": [],
  "verified": [],
  "tags": []
}