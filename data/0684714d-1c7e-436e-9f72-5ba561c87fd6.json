{
  "id": "0684714d-1c7e-436e-9f72-5ba561c87fd6",
  "instruction": "Design an algorithm for finding the longest common subsequence between two strings",
  "input": "s1 = 'ABCDGH'\ns2 = 'AEDFHR'",
  "output": "def LCS(s1, s2): \n    m = len(s1) \n    n = len(s2)\n  \n    # declaring the array for storing the dp values \n    L = [[None]*(n + 1) for _ in range(m + 1)] \n  \n    \"\"\"Following steps build L[m + 1][n + 1] in bottom up fashion \n    Note: L[i][j] contains length of LCS of X[0..i-1] \n    and Y[0..j-1]\"\"\"\n    for i in range(m + 1): \n        # previoius row is all zeros, \n        # as no common sequence can make using them \n        for j in range(n + 1): \n            # first columns of all rows are 0 \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif s1[i-1] == s2[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1] \n    return L[m][n]",
  "license": "stanford-alpaca-unknown",
  "generation-type": "openai-text-davinci-003",
  "generation-reference": "https://github.com/tatsu-lab/stanford_alpaca/blob/main/alpaca_data.json",
  "modified": [],
  "verified": [],
  "tags": []
}