{
  "id": "5a42bab4-57e4-42ab-b8ee-82336f31f313",
  "instruction": "Generate an algorithm to find the longest substring of two strings",
  "input": "",
  "output": "def longest_common_substring(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    LCSuff = [[0 for i in range(n2+1)] for j in range(n1+1)] \n  \n    res = \"\" # To store the result \n    lenght = 0 # To store the lenght of the result \n  \n    # building up theLCSuff[][] in bottom up manner \n    for i in range(n1+1): \n        for j in range(n2+1): \n            if (i == 0 or j == 0): \n                LCSuff[i][j] = 0\n            elif (str1[i-1] == str2[j-1]): \n                LCSuff[i][j] = LCSuff[i-1][j-1] + 1\n                if (lenght < LCSuff[i][j]): \n                    lenght = LCSuff[i][j] \n                    res = str1[i-lenght: i] \n            else: \n                LCSuff[i][j] = 0\n  \n    return res",
  "license": "stanford-alpaca-unknown",
  "generation-type": "openai-text-davinci-003",
  "generation-reference": "https://github.com/tatsu-lab/stanford_alpaca/blob/main/alpaca_data.json",
  "modified": [],
  "verified": [],
  "tags": []
}