{
  "id": "f041a448-1bf9-4ab3-b529-94bd2027cee7",
  "instruction": "Write an algorithm to implement a binary search tree.",
  "input": "",
  "output": "def insert(node, data): \n    # If the tree is empty, return a new node \n    if node is None: \n        return Node(data) \n  \n    # Otherwise, recur down the tree\n    if data < node.data: \n        node.left = insert(node.left, data) \n    else: \n        node.right = insert(node.right, data) \n  \n    # return the (unchanged) node pointer \n    return node \n  \n# Function to search a given data \ndef search(node, data): \n      \n    # Base Case: if root is None or key is present at root \n    if node is None or node.data == data: \n        return node \n  \n    # Key is greater than root's key \n    if node.data < data: \n        return search(node.right, data) \n  \n    # Key is smaller than root's key \n    return search(node.left, data)",
  "license": "stanford-alpaca-unknown",
  "generation-type": "openai-text-davinci-003",
  "generation-reference": "https://github.com/tatsu-lab/stanford_alpaca/blob/main/alpaca_data.json",
  "modified": [],
  "verified": [],
  "tags": []
}