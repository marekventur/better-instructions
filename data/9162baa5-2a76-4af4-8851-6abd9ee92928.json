{
  "id": "9162baa5-2a76-4af4-8851-6abd9ee92928",
  "instruction": "Design an algorithm to find the longest word in a string.",
  "input": "",
  "output": "def longest_word(string): \n    # Split the string into a list of words\n    words = string.split() \n  \n    # Initialize the maximum length\n    max_length = 0\n  \n    # Traverse the list of words\n    for word in words: \n        # Calculate the length of each word\n        word_length = len(word)\n   \n        # Keep track of the maximum length\n        if(word_length > max_length): \n            max_length = word_length \n  \n    # Return the maximum length of words \n    return max_length\n\n# Driver's code \ninput_string = 'this is a string containing words'\nprint(longest_word(input_string)) # Output: containing (Longest word of the given string)",
  "license": "stanford-alpaca-unknown",
  "generation-type": "openai-text-davinci-003",
  "generation-reference": "https://github.com/tatsu-lab/stanford_alpaca/blob/main/alpaca_data.json",
  "modified": [],
  "verified": [],
  "tags": []
}